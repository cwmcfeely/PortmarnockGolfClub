@page "/bookings"
@using PortmarnockGolfClub.Models
@using PortmarnockGolfClub.Services
@inject BookingService BookingService
@inject MemberService MemberService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Tee Time Bookings</h3>

<div class="form-group mb-3">
    <div class="row">
        <div class="col-md-4">
            <label>Select Date:</label>
            <input type="date" class="form-control" @bind="selectedDate" @bind:format="yyyy-MM-dd" />
            <button class="btn btn-success mt-2" @onclick="LoadBookings">View Bookings</button>
        </div>

        <div class="col-md-4">
            <label>Filter by Member:</label>
            <select class="form-control" @bind="selectedMembershipNumber">
                <option value="">All Members</option>
                @foreach (var member in allMembers)
                {
                    <option value="@member.MembershipNumber">@member.Name</option>
                }
            </select>
        </div>
    </div>
</div>

@if (bookings == null)
{
    <p><em>Loading...</em></p>
}
else if (bookings.Count == 0)
{
    <p>No bookings found for this date.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Time</th>
                <th>Booked By</th>
                <th>Players</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in bookings)
            {
                <tr>
                    <td>@booking.TimeSlot</td>
                    <td>
                        @if (booking.Players.Any())
                        {
                            @booking.Players[0].Name
                        }
                        else
                        {
                            @($"Member #{booking.MembershipNumber}")
                        }
                    </td>
                    <td>
                        @foreach (var player in booking.Players)
                        {
                            <div>@player.Name (Handicap: @player.Handicap)</div>
                        }
                    </td>
                    <td>
                        <button class="btn btn-sm btn-warning me-1" @onclick="() => EditBooking(booking.BookingID)">
                            Edit
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteBooking(booking.BookingID)">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="=" col-md-4?">
        <a href="/bookings/create" class="btn btn-success mt-2">Book Tee Time</a>
    </div>
}

@code {
    private DateTime selectedDate = DateTime.Today;
    private List<Booking> bookings = new List<Booking>();
    private List<Member> allMembers = new List<Member>();
    private int? selectedMembershipNumber;

    private async Task LoadMembers()
    {
        allMembers = await MemberService.GetAllMembersAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadMembers();
        await LoadBookings();
    }

    private async Task LoadBookings()
    {
        var allBookings = await BookingService.GetBookingsForDateAsync(selectedDate);

        if (selectedMembershipNumber.HasValue)
        {
            bookings = allBookings
            .Where(b => b.MembershipNumber == selectedMembershipNumber.Value)
            .ToList();
        }
        else
        {
            bookings = allBookings;
        }
    }

    private async Task OnMemberSelectionChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int membershipNumber))
        {
            selectedMembershipNumber = membershipNumber;
        }
        else
        {
            selectedMembershipNumber = null;
        }
        await LoadBookings();
    }

    private async Task DeleteBooking(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to Delete this booking?"))
        {
            await BookingService.DeleteBookingAsync(id);
            await LoadBookings();
        }
    }

    private void EditBooking(int id)
    {
        NavigationManager.NavigateTo($"/bookings/edit/{id}");
    }

}