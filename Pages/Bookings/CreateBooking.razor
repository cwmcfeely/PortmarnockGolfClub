@page "/bookings/create"
@using PortmarnockGolfClub.Models
@using PortmarnockGolfClub.Services
@using System.Text.Json
@inject BookingService BookingService
@inject MemberService MemberService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Book a Tee Time</h3>

<EditForm Model="@booking" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator /> <!-- Enables validation based on data annotations -->
    <ValidationSummary /> <!-- Displays validation error messages -->

    <div class="form-group mb-3">
        <label>Date:</label>
        <InputDate @bind-Value="booking.Date" class="form-control" /> <!-- Input field for selecting date -->
        <button type="button" class="btn btn-success mt-2" @onclick="CheckAvailability">
            <!-- Button to check available times -->
            Check Available Times
        </button>
    </div>

    @if (availableSlots != null) // Display time slot selection if slots are available
    {
        <div class="form-group mb-3">
            <label>Time Slot:</label>
            <select @bind="booking.TimeSlot" class="form-select">
                <option value="">-- Select Time --</option>
                @foreach (var slot in availableSlots)
                {
                    <option value="@slot">@slot</option>
                }
            </select>
        </div>

        <h4 class="mt-4">Player Information</h4>

        <!-- Section for main player (the user) -->
        <div class="card mb-3">
            <div class="card-header">Main Player (You)</div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Name:</label>
                            <select class="form-select" @onchange="(e) => SelectPlayer(e, 0)">
                                <option value="">-- Select Player --</option>
                                @foreach (var member in allMembers)
                                {
                                    <option value="@member.MembershipNumber">@member.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Handicap:</label>
                            <input type="number" class="form-control" @bind="players[0].Handicap" readonly />
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Loop to add additional players -->
        @for (int i = 1; i < players.Count; i++)
        {
            var index = i;
            <div class="card mb-3">
                <div class="card-header">
                    Player @(index + 1)
                    <button type="button" class="btn btn-sm btn-danger float-end"
                        @onclick="() => RemovePlayer(index)">Remove</button>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Name:</label>
                                <select class="form-select" @onchange="(e) => SelectPlayer(e, index)">
                                    <option value="">-- Select Player --</option>
                                    @foreach (var member in allMembers)
                                    {
                                        <option value="@member.MembershipNumber">@member.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Handicap:</label>
                                <input type="number" class="form-control" @bind="players[index].Handicap" readonly />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Button to add a new player (maximum 4 players) -->
        @if (players.Count < 4)
        {
            <button type="button" class="btn btn-success mt-2" @onclick="AddPlayer">Add Player</button>
        }
        <div> 
        </div>
        <!-- Buttons for submitting or canceling the booking -->
        <div>
            <button type="submit" class="btn btn-success mt-2">Book Tee Time</button>
            <a href="/bookings" class="btn btn-warning mt-2">Cancel</a>
        </div>
    }
</EditForm>

@code {
    // Booking model initialization with default values
    private Booking booking = new Booking
    {
        Date = DateTime.Today.AddDays(1),
        PlayerDetails = "[]" // Initialize as an empty JSON array
    };
    private List<PlayerInfo> players = new List<PlayerInfo> { new PlayerInfo() }; // List of players
    private List<string> availableSlots = new List<string>(); // Available tee time slots
    private Member currentMember = new Member(); // Current logged-in member
    private List<Member> allMembers = new List<Member>(); // List of all members

    protected override async Task OnInitializedAsync()
    {
        allMembers = await MemberService.GetAllMembersAsync();
        players = new List<PlayerInfo> { new PlayerInfo() };
        int currentMemberId = 1; // Simulated authentication
        currentMember = await MemberService.GetMemberByIdAsync(currentMemberId) ?? new Member();

        if (currentMember != null)
        {
            booking.MembershipNumber = currentMember.MembershipNumber;
        }
        booking.PlayerDetails = JsonSerializer.Serialize(players);
    }

    private async Task SelectPlayer(ChangeEventArgs e, int playerIndex)
    {
        if (string.IsNullOrEmpty(e.Value?.ToString())) return;
        var membershipNumber = Convert.ToInt32(e.Value);

        // Ensure each player is only added once
        bool isDuplicate = players.Where((p, idx) => idx != playerIndex).Any(p => p.MembershipNumber == membershipNumber);
        if (isDuplicate)
        {
            await JSRuntime.InvokeVoidAsync("alert", "This player is already in your booking.");
            return;
        }
        var selectedMember = allMembers.FirstOrDefault(m => m.MembershipNumber == membershipNumber);
        if (selectedMember != null)
        {
            players[playerIndex].Name = selectedMember.Name;
            players[playerIndex].Handicap = selectedMember.Handicap;
            players[playerIndex].MembershipNumber = selectedMember.MembershipNumber;

            if (selectedMember != null)
        {
            players[playerIndex].Name = selectedMember.Name;
            players[playerIndex].Handicap = selectedMember.Handicap;
            players[playerIndex].MembershipNumber = selectedMember.MembershipNumber;
            
            // If this is the main player, update the booking's MembershipNumber
            if (playerIndex == 0)
            {
                booking.MembershipNumber = selectedMember.MembershipNumber;
            }
            
            // Update PlayerDetails whenever a player is selected
            booking.PlayerDetails = JsonSerializer.Serialize(players);
        }
    }

    private async Task CheckAvailability()
    {
        // Log MembershipNumber and Date for debugging
        Console.WriteLine($"MembershipNumber: {booking.MembershipNumber}, Date: {booking.Date}");

        if (booking.Date < DateTime.Today)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Cannot book tee times in the past");
            return;
        }

        // Check if member already has a booking on the selected date
        bool hasBooking = await BookingService.MemberHasBookingOnDate(booking.MembershipNumber, booking.Date);
        if (hasBooking)
        {
            await JSRuntime.InvokeVoidAsync("alert", "You already have a booking on this date. Members can only book one tee time per day.");
            return;
        }

        // Fetch available time slots for the date
        availableSlots = await BookingService.GetAvailableSlotsAsync(booking.Date);
    }

    private void AddPlayer()
    {
        if (players.Count < 4)
        {
            players.Add(new PlayerInfo());
            // Update PlayerDetails whenever a player is added
            booking.PlayerDetails = JsonSerializer.Serialize(players);
        }
    }

    private void RemovePlayer(int index)
    {
        if (index > 0 && index < players.Count)
        {
            players.RemoveAt(index);
            // Update PlayerDetails whenever a player is removed
            booking.PlayerDetails = JsonSerializer.Serialize(players);
        }
    }

    private async Task HandleValidSubmit()
    {
        // Force serialization of player details before validation
        booking.PlayerDetails = JsonSerializer.Serialize(players);
        
        if (string.IsNullOrEmpty(booking.TimeSlot))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please select a time slot");
            return;
        }

        try
        {
            // Make sure player names are trimmed to avoid whitespace-only names
            foreach (var player in players)
            {
                player.Name = player.Name?.Trim() ?? string.Empty;
            }
            
            // Filter out players with empty names
            var validPlayers = players.Where(p => !string.IsNullOrWhiteSpace(p.Name)).ToList();
            
            if (validPlayers.Count == 0)
            {
                await JSRuntime.InvokeVoidAsync("alert", "At least one player is required");
                return;
            }
            
            // Explicitly serialize to PlayerDetails
            booking.Players = validPlayers;
            booking.PlayerDetails = JsonSerializer.Serialize(validPlayers);
            
            // Create booking
        await BookingService.CreateBookingAsync(booking);
            
        NavigationManager.NavigateTo("/bookings");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }
}